import click
import json


class Jupytoc(object):

    def __init__(self, path):
        self.notebook_path = path
        self.credits = '<!-- Table of Contents generated by Jupytoc -->\n'
        self.compute_toc()

    def read_notebook_content(self):
        with open(self.notebook_path, 'r') as file:
            return json.load(file)

    def find_existing_toc(self, ipynb):
        for i, cell in enumerate(ipynb['cells']):
            if cell['cell_type'] == 'markdown' and self.credits in cell['source']:
                return (True, i)
        return (False, None)

    def get_markdown_cells(self, ipynb):
        return [cell for cell in ipynb['cells'] if cell['cell_type'] == 'markdown']

    def get_markdown_lines(self, markdown_cells):
        return [[line for line in cell['source']] for cell in markdown_cells]

    def get_headers(self, markdown_lines):
        for lines in markdown_lines:
            for line in lines:
                stripped_right = line.rstrip('#')
                stripped_both = stripped_right.lstrip('#')
                stripped_wspace = stripped_both.strip()
                level = len(stripped_right) - len(stripped_both)
                link_anchor = lambda header: '#{}'.format(header.replace(' ', '-'))
                if level > 0:
                    yield (level, stripped_wspace, link_anchor(stripped_wspace))

    def build_toc(self, headers):
        return [self.credits] + ['**Table of Contents**\n'] + ['{nb_spaces}- [{title}]({link})\n'.format(
            nb_spaces=' ' * 2 * (level - 1),
            title=title,
            link=link_anchor
        ) for level, title, link_anchor in headers]

    def write_toc(self, ipynb, toc, update_toc, position):
        markdown_cell = lambda toc: {
            'cell_type': 'markdown',
            'metadata': {},
            'source': toc
        }

        if update_toc:
            ipynb['cells'][position] = markdown_cell(toc)
        else:
            ipynb['cells'].insert(0, markdown_cell(toc))

        with open(self.notebook_path, 'w') as file:
            file.write(json.dumps(ipynb, indent=2))

    def compute_toc(self):
        ipynb = self.read_notebook_content()
        markdown_cells = self.get_markdown_cells(ipynb)
        update_toc, position = self.find_existing_toc(ipynb)
        markdown_lines = self.get_markdown_lines(markdown_cells)
        headers = self.get_headers(markdown_lines)
        toc = self.build_toc(headers)
        self.write_toc(ipynb, toc, update_toc, position)


@click.command()
@click.argument('notebook_path', nargs=1, type=click.Path(exists=True))
def cli(notebook_path):
    Jupytoc(path=notebook_path)


if __name__ == '__main__':
    cli()
